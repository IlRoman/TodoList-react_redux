{"version":3,"sources":["gateWays.js","redux/selectors.js","redux/actions.js","redux/redusers.js","store.js","components/TextArea.jsx","components/TasksList.jsx","components/Todolist.jsx","App.jsx","index.jsx"],"names":["baseUrl","tasksListSelector","state","eventsList","tasksList","getTasksList","dispatch","fetch","then","response","json","type","payload","tasksListReceived","defaultState","eventReducer","action","reducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","TextArea","content","handleChange","element","target","name","value","setState","className","this","onChange","onClick","props","onCreateTask","React","Component","TasksList","text","done","id","onDelete","classNames","defaultChecked","TodoList","sortedList","tasks","slice","sort","a","b","map","task","key","onDeleteTask","onUpdateTask","mapDispatch","actions","taskId","getState","find","upDatedTask","updatedTaskData","method","headers","body","JSON","stringify","updateTask","deleteTask","taskData","newTask","createdAt","Date","toISOString","connect","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.7c4b7fd6.chunk.js","sourcesContent":["const baseUrl = 'https://5e720541942d92001611a8f2.mockapi.io/api/v1/tasks'\r\n\r\nexport const fetchTasksList = () => {\r\n    return fetch(baseUrl)\r\n        .then(response => response.json())\r\n}\r\n\r\nexport const createTask = taskData => {\r\n    return fetch(baseUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n        body: JSON.stringify(taskData)\r\n    })\r\n}\r\n\r\nexport const updateTask = (taskId, updatedTaskData) => {\r\n    return fetch(`${baseUrl}/${taskId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n        body: JSON.stringify(updatedTaskData)\r\n    })\r\n}\r\n\r\nexport const deleteTask = (taskId) => {\r\n    return fetch(`${baseUrl}/${taskId}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n        },\r\n    })\r\n}","export const tasksListSelector = state => {\r\n    return state.eventsList.tasksList;\r\n}\r\n\r\nexport const textAreaLetters = state => {\r\n    return state.letters;\r\n}","import { fetchTasksList, updateTask, deleteTask, createTask } from '../gateWays'\nimport { tasksListSelector } from '../redux/selectors';\n\nexport const TASKS_LIST_RECEIVED = 'GET_TASKSLIST';\nexport const ADD_TASK = 'ADD_EVENT';\nexport const DELETE_TASK = 'DELETE_EVENT';\nexport const UPDATE_TASK = 'UPDATE_TASK';\n\nexport const tasksListReceived = (tasksList) => {\n    const action = {\n        type: TASKS_LIST_RECEIVED,\n        payload: {\n            tasksList,\n        }\n    }\n    return action;\n}\n\nexport const getTasksList = () => {\n    const thunkAction = function (dispatch) {\n        fetchTasksList()\n            .then(tasksList => dispatch(tasksListReceived(tasksList)))\n    };\n    return thunkAction;\n}\n\nexport const onCreateTask = text => {\n    const thunkAction = function (dispatch, getState) {\n        const newTask = {\n            text,\n            done: false,\n            createdAt: new Date().toISOString(),\n        }\n        createTask(newTask)\n            .then(() => dispatch(getTasksList(getState())))\n    };\n    return thunkAction;\n}\n\nexport const onUpdateTask = (taskId) => {\n    const thunkAction = function (dispatch, getState) {\n        const state = getState();\n        const tasksList = tasksListSelector(state)\n        const task = tasksList.find(\n            task => task.id === taskId,\n        )\n\n        const upDatedTask = {\n            ...task,\n            done: !task.done\n        }\n\n        updateTask(taskId, upDatedTask)\n            .then(tasksList => dispatch(getTasksList(tasksList)))\n    };\n    return thunkAction;\n}\n\nexport const onDeleteTask = (taskId) => {\n    const thunkAction = function (dispatch) {\n        deleteTask(taskId)\n            .then(tasksList => dispatch(getTasksList(tasksList)))\n    };\n    return thunkAction;\n}","import { TASKS_LIST_RECEIVED } from './actions'\n\nconst defaultState = {\n    tasksList: [],\n}\n\nconst eventReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case TASKS_LIST_RECEIVED: {\n            return {\n                ...state,\n                tasksList: action.payload.tasksList,\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport default eventReducer;","import { createStore, combineReducers, compose, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk';\nimport eventReducer from './redux/redusers'\n\nconst reducer = combineReducers({\n    eventsList: eventReducer,\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(\n    reducer,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nexport default store;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TextArea extends React.Component {\n    state = {\n        content: ''\n    }\n\n    handleChange = (element) => {\n        const { name, value } = element.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"create-task\">\n                <input\n                    name=\"content\"\n                    className=\"create-task__input\"\n                    type=\"text\"\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                />\n                <button\n                    className=\"btn create-task-btn\"\n                    onClick={() => this.props.onCreateTask(this.state.content)}\n                >Create</button>\n            </div>\n        );\n    }\n}\n\nTextArea.propTypes = {\n    onCreateTask: PropTypes.func,\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport const TasksList = ({ text, done, id, onDelete, onChange }) => {\n    return (\n        <li className={classNames('list-item', { 'list-item_done': done })}>\n            <input\n                className=\"list-item__checkbox\"\n                defaultChecked={done}\n                type=\"checkbox\"\n                onChange={() => onChange(id)}\n            />\n            <span className=\"list-item__text\">{text}</span>\n            <button\n                className=\"list-item__delete-btn\"\n                onClick={() => onDelete(id)}\n            ></button>\n        </li>\n    );\n};\n\nTasksList.propTypes = {\n    text: PropTypes.string,\n    done: PropTypes.bool,\n    id: PropTypes.string,\n    onDelete: PropTypes.func,\n    onChange: PropTypes.func\n}","import React from 'react';\nimport { TextArea } from './TextArea';\nimport { TasksList } from './TasksList';\nimport { connect } from 'react-redux';\nimport * as actions from '../redux/actions'\nimport { tasksListSelector } from '../redux/selectors'\nimport PropTypes from 'prop-types';\n\nclass TodoList extends React.Component {\n    componentDidMount() {\n        this.props.getTasksList();\n    }\n\n    render() {\n        const sortedList = this.props.tasks\n            .slice()\n            .sort((a, b) => a.done - b.done);\n\n        return (\n            <>\n                <h1 className=\"title\">Todo list</h1>\n                <main className=\"todo-list\">\n                    <TextArea onCreateTask={this.props.onCreateTask} />\n                    <ul className=\"list\">\n                        {sortedList.map(task =>\n                            <TasksList\n                                key={task.id}\n                                id={task.id}\n                                text={task.text}\n                                done={task.done}\n                                onDelete={this.props.onDeleteTask}\n                                onChange={this.props.onUpdateTask}\n                            />\n                        )}\n                    </ul>\n                </main>\n            </>\n        )\n    }\n}\n\nTodoList.propTypes = {\n    text: PropTypes.string,\n    done: PropTypes.bool,\n    id: PropTypes.string,\n}\n\nconst mapState = state => {\n    return {\n        tasks: tasksListSelector(state)\n    }\n}\n\nconst mapDispatch = {\n    getTasksList: actions.getTasksList,\n    onUpdateTask: actions.onUpdateTask,\n    onDeleteTask: actions.onDeleteTask,\n    onCreateTask: actions.onCreateTask,\n}\n\nexport default connect(mapState, mapDispatch)(TodoList)","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport TodoList from './components/Todolist'\n\nexport const App = () => {\n    return (\n        <Provider store={store}>\n            <TodoList />\n        </Provider>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(<App />, document.querySelector('#root'))"],"sourceRoot":""}